#include <stdio.h>
#include <math.h>
#define READFILE "s03637.dat"
#define WRITEFILE "s03637.res"
int n,N[10],M1,M2,NST,INS,Deltav,x_max,y_max,pole_position[10];
double delta,Deltaz[10],V[10],R1,R2,e,lenth_vertical[50],lenth_horizontal[100];
double space_v[101][51];


void load_data();
void format_data();
void sor_method();
void view_space_v();
void write_data();

void main()
{
        load_data();
    write_data();
        format_data();
        view_space_v();
//      sor_method();
//      view_space_v();
}

void load_data()
{   
    int i;
        FILE *fp1;
        printf("Loading...Please Wait\n");
        if ((fp1=fopen(READFILE,"r"))==NULL)
                {
                printf("error! can not open the data file!");
                return;
                }
    //读数据
        fscanf(fp1,"delta=%lfmm;n=%d;\nDeltaz=",&delta,&n);
        for (i=0;i<(n-1);i++)
            fscanf(fp1,"%lf,",&Deltaz[i]);
            fscanf(fp1,"%lfmm;\nNi=",&Deltaz[i]);
    for (i=0;i<(n-1);i++)
            fscanf(fp1,"%d,",&N[i]);
        fscanf(fp1,"%d;\nVi=",&N[i]);
    for (i=0;i<(n-1);i++)
            fscanf(fp1,"%lf,",&V[i]);
        fscanf(fp1,"%lfV;\n",&V[i]);
        fscanf(fp1,"R1=%lfmm;M1=%d;R2=%lfmm;M2=%d;\n",&R1,&M1,&R2,&M2);
                fscanf(fp1,"e=%lfV;NST=%d;INS=%d;Deltav=%d",&e,&NST,&INS,&Deltav);
                fclose(fp1);
}


void format_data()
{ 
        int i=0,ring=0;
        int j=0;
        int k=0;
        int l=0;
        double step_v,x_mm,x_pos,r0=0; 

//网格点赋0值
        for (i=0;i<100;i++)
                {
                        for (j=0;j<50;j++)
                        space_v[i][j]=0;
                }
    i=0;
        j=0;

//x,y的上下界
    x_max=0;
        y_max=M1+M2;
        for (i=0;i<n;i++)
                x_max+=(N[i]+1);
        x_max=x_max-1;

//y轴每格长度
        for (i=0;i<y_max;i++)
                {
                        if(i<M1)
                                lenth_vertical[i]=R1/M1;
                                else 
                                        lenth_vertical[i]=R2/M2;
                }

//x轴每格长度
        for (i=0;i<n;i++)
                {
                        for (j=0;j<N[i];j++)
                                {
                                        lenth_horizontal[k]=Deltaz[i]/N[i];
                                        k++;
                                }
                        lenth_horizontal[k]=delta;
                        k++;
                }       
                        
//初始化电位

//右边界
        for (i=0;i<y_max;i++)
                space_v[x_max][i]=V[n-1];

//z轴初始化电位
        x_mm=0;
        x_pos=0;
        for (i=0;i<x_max;i++)
                {
                        x_mm=x_mm+lenth_horizontal[i];
                }
        step_v=V[n-1]/x_mm;     

        for (i=0;i<x_max;i++)
                {       
                        space_v[i][0]=x_pos*step_v;
                        x_pos=x_pos+lenth_horizontal[i];
                }

//补充边界和极板区初始化电位

        for (i=0;i<n;i++)
                {               
                x_mm=0;
        x_pos=0;
        j=0;
                        for (j=0;j<N[i];j++)
                                {
                                        x_mm=x_mm+lenth_horizontal[j+l];
                                }
                        if (i==0) step_v=V[i]/x_mm;
                                else  step_v=(V[i]-V[i-1])/x_mm;
                        for (k=0;k<j;k++)
                                {
                                        for (ring=M1;ring<=y_max;ring++)
                                                space_v[l][ring]=V[i-1]+x_pos*step_v;
                                        x_pos=x_pos+lenth_horizontal[l];
                                        l++;
                                }
                        l++;
                }


//极板位置和电位
        j=N[0];
    pole_position[0]=j;
        for (i=0;i<n;i++)
                {
                        for (k=0;k<=M2;k++)
                                {
                                        space_v[j][k+M1]=V[i];
                                        if (i!=(n-1)) space_v[j+1][k+M1]=V[i];
                                }
                        j=j+N[i+1]+1;
                        if (i!=n-1) pole_position[i+1]=j;
                }
                        
}

//计算
void sor_method()
{
        int i=0,j=0,k=0,l,circle,circle12,Na,pole_if,circle_flag=1,count_c=0;
        double c0,c1,c2,c3,c4,r0,temp,ek=0,ek1=0,lamda,w,w_temp,w_flag=1,wlamda,ulamda;

    Na=M1*(x_max-1)+M2*(x_max+1-2*n);
        for (circle=0;;count_c++)
        {
                if (circle==0) 
                        w=1;
                if (circle==1) 
                        w=1.375;
                if (circle==0||circle==1) 
                        circle++;
                if (circle_flag==0) 
                        break;
                ek=0;
                ek1=0;
                for (circle12=0;circle12<12;circle12++)////****这句话有点问题****
        //12次迭代
                {       
                        circle_flag=0;
                        for (i=1;i<x_max;i++)
                         {      
                                temp=space_v[i][0];
                                c0=0;
                                c1=2/(lenth_horizontal[i-1]*(lenth_horizontal[i-1]*lenth_horizontal[i]));
                                c2=2/(lenth_horizontal[i]*(lenth_horizontal[i-1]*lenth_horizontal[i]));
                                c3=0;
                                c4=4/(lenth_vertical[0]*lenth_vertical[0]);
                                c0=c1+c2+c3+c4;
                                space_v[i][0]=(1-w)*space_v[i][0]+w*(c1*space_v[i-1][0]+c2*space_v[i+1][0]+c4*space_v[i][1])/c0;
                                if (circle12==10)
                                                                                {
                                                                                        ek=ek+fabs(space_v[i][0]-temp)/Na;
                                                                                }
                                if (circle12==11)
                                                                                {
                                                                                        ek1=ek1+fabs(space_v[i][0]-temp)/Na;
                                                                                }
                        }
                        for (j=1;j<y_max;j++)
                                {
                                        for (i=1;i<x_max;i++)
                                                {       

                                                        pole_if=0;
                                                        for (k=0;k<n-1;k++)
                                                                {
                                                                        if ((i==pole_position[k]||i==pole_position[k]+1)&&j>=M1)
                                                                                {
                                                                                        pole_if=1;
                                                                                        break;
                                                                                }
                                                                }
                                                        if (pole_if==0)                                                         
                                                                {       
                                                                        temp=space_v[i][j];
                                                                        for (l=0,r0=0,c0=0;l<j;l++)
                                                                                r0=r0+lenth_vertical[j-1];
                                                                        c1=2/(lenth_horizontal[i-1]*(lenth_horizontal[i-1]*lenth_horizontal[i]));
                                                                        c2=2/(lenth_horizontal[i]*(lenth_horizontal[i-1]*lenth_horizontal[i]));
                                                                        c3=(2*r0-lenth_vertical[j])/(r0*lenth_vertical[j-1]*(lenth_vertical[j-1]+lenth_vertical[j]));
                                                                        c4=(2*r0+lenth_vertical[j])/(r0*lenth_vertical[j]*(lenth_vertical[j-1]+lenth_vertical[j]));
                                                                        c0=c1+c2+c3+c4;
                                                                        space_v[i][j]=(1-w)*space_v[i][j]+w*(c1*space_v[i-1][j]+c2*space_v[i+1][j]+c3*space_v[i][j-1]+c4*space_v[i][j+1])/c0;

                                    if (fabs(space_v[i][j]-temp)>=e)
                                                                                circle_flag=1;
                                                                        if (circle12==10)
                                                                                {
                                                                                        ek=ek+fabs(space_v[i][j]-temp)/Na;
                                                                                }
                                                        
                                                                        if (circle12==11)
                                                                                {
                                                                                        ek1=ek1+fabs(space_v[i][j]-temp)/Na;
                                                                                }                                                               
                                                                }
                                        }
                        }               
                }//12次跌带完
                if (circle==2&&w_flag==1)
                        {
                                w_temp=w;
                                lamda=ek1/ek;
                                ulamda=(lamda+w-1)/(sqrt(lamda)*w);
                                wlamda=2/(1+sqrt(1-ulamda*ulamda));
                                w=1.25*wlamda-0.5;
                                if (fabs((w-w_temp)/(2-w))<0.05)        
                                        w_flag=0;
                                else w_flag=1;
                //      w=1.83;
                        }
        }
printf("%d",count_c);
}


//写空间电位到文件中
void view_space_v()
{
        int i,j;
    FILE *fp2;
        if ((fp2=fopen("tiaoshi2.txt","w+"))==NULL)
                {
                printf("error! can not open the data file!");
                return;
                }

        for (j=y_max;j>=0;j--)
        {
                fprintf(fp2,"%12d",j);
                for (i=0;i<=x_max;i++)
                {
                        fprintf(fp2,"%12lf",space_v[i][j]);
                }
                
                fprintf(fp2,"\n");
        }
        fprintf(fp2,"            ");
        for (i=0;i<=x_max;i++) 
                fprintf(fp2,"%12d",i);
        fclose(fp2);
}


void write_data()
{   
    int i;
        FILE *fp1;
        printf("Loading...Please Wait\n");
        if ((fp1=fopen("tiaoshi.txt","w+"))==NULL)
                {
                printf("error! can not open the data file!");
                return;
                }
    //读数据
        fprintf(fp1,"delta=%lfmm;n=%d;\nDeltaz=",delta,n);
        for (i=0;i<(n-1);i++)
            fprintf(fp1,"%lf,",Deltaz[i]);
            fprintf(fp1,"%lfmm;\nNi=",Deltaz[i]);
    for (i=0;i<(n-1);i++)
            fprintf(fp1,"%d,",N[i]);
        fprintf(fp1,"%d;\nVi=",N[i]);
    for (i=0;i<(n-1);i++)
            fprintf(fp1,"%lf,",V[i]);
        fprintf(fp1,"%lfV;\n",V[i]);
        fprintf(fp1,"R1=%lf;M1=%d;R2=%lf;M2=%d;\n",R1,M1,R2,M2);
                fprintf(fp1,"e=%lfV;NST=%d;INS=%d;Deltav=%d",e,NST,INS,Deltav);
                fclose(fp1);
}
